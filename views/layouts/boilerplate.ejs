<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dribbble</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.1/css/all.min.css"
      integrity="sha512-2SwdPD6INVrV/lHTZbO2nodKhrnDdJK9/kg2XD1r9uGqPo1cUbujc+IYdlYdEErWNu69gVcYgdxlmVmzTWnetw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      rel="shortcut icon"
      href="/images/Dribbble-logo.png"
      type="image/x-icon"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <% if (cssFiles && cssFiles.length > 0) { %> <% cssFiles.forEach(cssFile =>
    { %>
    <link rel="stylesheet" href="<%= cssFile %>" />
    <% }) }; %>
  </head>
  <body>
    <%- include('../includes/header.ejs') %> <%-
    include('../includes/flash.ejs') %> <%- body %> <%-
    include('../includes/footer.ejs') %>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const fileInput = document.getElementById("image");
        const uploadSection = document.querySelector(".file-upload-section");
        const previewContainer = document.querySelector(
          ".image-preview-container"
        );

        if (fileInput && uploadSection) {
          fileInput.addEventListener("change", function (e) {
            const file = e.target.files[0];
            if (file) {
              if (previewContainer) {
                const reader = new FileReader();
                reader.onload = function (e) {
                  previewContainer.innerHTML = `
                    <div class="image-preview">
                      <img src="${e.target.result}" alt="Preview" class="preview-image">
                      <button type="button" class="remove-image" onclick="removeImage()">Ã—</button>
                    </div>
                  `;
                  previewContainer.classList.add("active");
                };
                reader.readAsDataURL(file);
              }
            }
          });

          uploadSection.addEventListener("dragover", function (e) {
            e.preventDefault();
            uploadSection.classList.add("dragover");
          });

          uploadSection.addEventListener("dragleave", function (e) {
            e.preventDefault();
            uploadSection.classList.remove("dragover");
          });

          uploadSection.addEventListener("drop", function (e) {
            e.preventDefault();
            uploadSection.classList.remove("dragover");
            const files = e.dataTransfer.files;
            if (files.length > 0) {
              fileInput.files = files;
              fileInput.dispatchEvent(new Event("change"));
            }
          });
        }

        window.removeImage = function () {
          if (fileInput) fileInput.value = "";
          if (previewContainer) {
            previewContainer.classList.remove("active");
            previewContainer.innerHTML = "";
          }
        };

        const forms = document.querySelectorAll(".needs-validation");
        Array.from(forms).forEach((form) => {
          form.addEventListener(
            "submit",
            (event) => {
              if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
              }
              form.classList.add("was-validated");
            },
            false
          );
        });

        window.toggleHeartHome = async function (shotId, element) {
          try {
            const response = await fetch(`/shot/${shotId}/stat/hearts`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({}),
            });

            if (response.ok) {
              const data = await response.json();
              const icon = element.querySelector(".stat-icon-hearts");
              const count = element.querySelector(".stat-number");

              if (data.isHearted) {
                icon.classList.remove("fa-regular");
                icon.classList.add("fa-solid");
                icon.style.color = "#ef4444";
                element.classList.add("liked");
              } else {
                icon.classList.remove("fa-solid");
                icon.classList.add("fa-regular");
                icon.style.color = "";
                element.classList.remove("liked");
              }

              count.textContent = data.hearts;

              element.style.transform = "scale(1.1)";
              setTimeout(() => (element.style.transform = "scale(1)"), 150);
            }
          } catch (error) {
            console.error("Error updating hearts:", error);
          }
        };

        window.toggleLikeHome = async function (shotId, element) {
          try {
            const response = await fetch(`/shot/${shotId}/stat/likes`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({}),
            });

            if (response.ok) {
              const data = await response.json();
              const icon = element.querySelector(".stat-icon-thumbs");
              const count = element.querySelector(".stat-number");

              if (data.isLiked) {
                icon.classList.remove("fa-regular");
                icon.classList.add("fa-solid");
                icon.style.color = "#123ac0";
                element.classList.add("liked");
              } else {
                icon.classList.remove("fa-solid");
                icon.classList.add("fa-regular");
                icon.style.color = "";
                element.classList.remove("liked");
              }

              count.textContent = data.likes;

              element.style.transform = "scale(1.1)";
              setTimeout(() => (element.style.transform = "scale(1)"), 150);
            }
          } catch (error) {
            console.error("Error updating likes:", error);
          }
        };

        window.showLoginMessage = function () {
          fetch("/user/login-required", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          })
            .then(() => {
              window.location.href = "/user/login";
            })
            .catch(() => {
              window.location.href = "/user/login";
            });
        };
      });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
